{"version":3,"file":"static/js/1215.eb75682b.chunk.js","mappings":"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","sources":["views/pages/banner/Listbanner.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom'\nimport { format } from 'date-fns'\nimport {\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\n\nconst Listbanner = () => {\n  // List show data\n  const navigate = useNavigate()\n  const baseUri = 'http://localhost:7777/'\n  const [values, setValues] = useState([])\n  const [message, setMessage] = useState('')\n // console.log(values)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await axios.get('http://localhost:7777/list')\n        const response = result.data.data\n         // console.log(response)\n        const list = []\n\n        for (let i = 0; i < response.length; i++) {\n          for (let j = 0; j < response[i].banner.length; j++) {\n            var outletBanner = {\n              _id: response[i]._id,\n              outlet_id: response[i].outlet_id,\n              banner: response[i].banner[j],\n            }\n            list.push(outletBanner)\n          }\n        }\n        setValues(list)\n      } catch (error) {\n        setMessage(error.message)\n      }\n    }\n    fetchData()\n  }, [])\n\n  // Delete data start\n  const toDelete = (id, outlet_id) => {\n    axios\n      .delete(`http://localhost:7777/delete/${id}/${outlet_id}`)\n      .then(() => {\n        setValues(\n          values.filter((val) => {\n            return val._id !== id\n          }),\n        )\n      //  setMessage('Successfully banner data deleted')\n      alert('Successfully banner data deleted')\n      window.location.reload()\n      })\n      .catch((error) => {\n        console.log(error.message)\n      })\n  }\n  // Delete Data end\n\n  //Navigate to Edit page\n  const handleProcess = (id) => {\n    console.log(id)\n    navigate(`/pages/banner/Editbanner/${id}`)\n  }\n\n  //Date converter\n  const date = (date) => {\n    let b =format(new Date(date), 'yyyy/MM/dd').toLocaleString()\n    return b\n  }\n  return (\n    <>\n      <br />\n      <div className=\"flex-right\">\n        <Link to=\"/pages/banner/Addbanner\">\n          <button\n            className=\"btn btn-primary btn-lg\"\n           // style={{ display: 'flex', justifyContent: 'flex-end ' }}\n          >\n            {' '}\n            Create\n          </button>\n        </Link>\n      </div>\n      <div />\n      <p className=\"text-medium-emphasis text-center\">{message}</p>\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardBody>\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow className=\"text-center\">\n                    <CTableHeaderCell>Sr. No.</CTableHeaderCell>\n                    <CTableHeaderCell>Outlet Id</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Banner Title</CTableHeaderCell>\n                    <CTableHeaderCell className=\"image\">Image</CTableHeaderCell>\n                    <CTableHeaderCell>Is Active</CTableHeaderCell>\n                    <CTableHeaderCell>Is Fix</CTableHeaderCell>\n                    <CTableHeaderCell>From Date</CTableHeaderCell>\n                    <CTableHeaderCell>To Date</CTableHeaderCell>\n                    <CTableHeaderCell>Action</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {values\n                    ? values.map((item, index) => (\n                        <CTableRow key={index} className=\"text-center \">\n                          <CTableDataCell>{index + 1}</CTableDataCell>\n                          <CTableDataCell>{item.outlet_id}</CTableDataCell>\n                          <CTableDataCell>{item.banner.banner_title}</CTableDataCell>\n                          <CTableDataCell>\n                            {\n                              <img\n                                src={baseUri + item.banner.image_path}\n                                className='rounded'\n                                height=\"40px\"\n                                width=\"50px\"\n                                border-radius=\"5px\"\n                              />\n                            }\n                          </CTableDataCell>\n                          <CTableDataCell>{item.banner.is_active}</CTableDataCell>\n                          <CTableDataCell>{item.banner.is_fix}</CTableDataCell>\n                          <CTableDataCell>\n                            {item.banner.is_fix == 0 ? date(item.banner.duration.todate) : '-'}\n                          </CTableDataCell>\n                          <CTableDataCell>\n                            {item.banner.is_fix == 0 ? date(item.banner.duration.fromdate) : '-'}\n                          </CTableDataCell>\n                          {/* <div> */}\n                          <CTableDataCell>\n                            <div>\n                              <button\n                                className=\"btn btn-info\"\n                                type=\"button\"\n                                onClick={() => handleProcess(item.banner._id)}\n                              >\n                                Edit\n                              </button>{' '}\n                              {/* {\n                                console.log(item.banner._id)\n                              } */}\n                              <button className=\"btn btn-danger\" onClick={() => toDelete(item.banner._id,item._id)}>\n                                Delete\n                              </button>\n                            </div>\n                          </CTableDataCell>\n                          {/* </div> */}\n                        </CTableRow>\n                      ))\n                    : null}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Listbanner\n"],"names":["navigate","useNavigate","useState","values","setValues","message","setMessage","useEffect","fetchData","axios","result","response","data","list","i","length","j","banner","outletBanner","_id","outlet_id","push","date","format","Date","toLocaleString","className","to","xs","align","hover","responsive","color","map","item","index","banner_title","src","image_path","height","width","is_active","is_fix","duration","todate","fromdate","type","onClick","id","console","log","then","filter","val","alert","window","location","reload","catch","error"],"sourceRoot":""}